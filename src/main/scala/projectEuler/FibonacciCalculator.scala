package projectEuler

/**
 * Problem 2. Even Fibonacci numbers
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 * @see https://projecteuler.net/problem=2
 */
class FibonacciCalculator(val maxNumber: Int) {

  def calculate(n: Int, list: List[Int], limit: Int) : List[Int] = {
    if (n > limit)
      list
    else
      calculate(list.head + n, n :: list, limit)
  }

  def getNumbers(): List[Int] =  calculate(2, List(1), maxNumber).reverse

  def sumOfEvenValues() =
    getNumbers()
    .filter(x => x % 2 == 0)
    .sum




}
